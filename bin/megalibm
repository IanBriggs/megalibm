#!/usr/bin/env python3

import os.path as path
import sys

PYTHON_DIR = path.abspath(path.dirname(__file__))
GIT_DIR = path.split(PYTHON_DIR)[0]
sys.path.append(path.join(GIT_DIR, "src"))


from interval import Interval
import numeric_types
from lambdas import *

from utils.logging import Logger
from utils.timing import Timer


logger = Logger(level=Logger.LOW)
timer = Timer()




def make_optuner_sins():
    domain = Interval(0, numeric_types.fp64().half_pi())
    degrees = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    h_lines = ["#ifndef OPTUNER_SINS", "#define OPTUNER_SINS"]
    c_lines = ["#include <assert.h>", "#include <math.h>"]
    for deg in degrees:
        name = "ord_{:02}_sin_fp64".format(2*deg - 1)
        monomials = list(range(1, 2*deg, 2))

        # generate with no reduction
        lam = Horner(Polynomial("sin", domain, monomials, list()))
        sig, src = generate_c_code(lam, name)

        h_lines += [sig]
        c_lines += src

        # generate with reduction
        name = "rord_{:02}_sin_fp64".format(2*deg - 1)
        lam = FlipAboutZeroX(RepeatInf(RepeatNegate(RepeatFlip(lam))))
        sig, src = generate_c_code(lam, name)

        h_lines += [sig]
        c_lines += src

    h_lines += ["#endif"]

    with open("optuner_sins.h", 'w') as f:
        f.write("\n".join(h_lines))

    with open("optuner_sins.c", 'w') as f:
        f.write("\n".join(c_lines))




def main(argv):
    logger.set_log_level(Logger.EXTRA)

    make_optuner_sins()


if __name__ == "__main__":
    import sys

    retcode = 0
    try:
        retcode = main(sys.argv)
    except KeyboardInterrupt:
        print("\nBye")

    sys.exit(retcode)
